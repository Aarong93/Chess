'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports.clearsAll = clearsAll;
exports.setsAll = setsAll;
exports.getsAll = getsAll;
exports.sets = sets;
exports.gets = gets;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * meta state
 */

var STATE_NAME = '__meta_state__';

var assign = Object.assign;

function clearsAll() {
  if (this.state && this.state[STATE_NAME]) {
    this.setState(_defineProperty({}, STATE_NAME, {}));
  }
}

function setsAll(obj) {
  if (!this.state) {
    return throwError('state not exists');
  }

  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {
    return throwError('invalid param for setsAll');
  }

  // clear all first ?
  this.setState(_defineProperty({}, STATE_NAME, obj));
}

function getsAll() {
  return this.state && this.state[STATE_NAME] || {};
}

function sets(key, val) {
  if (!this.state) {
    return throwError('state not exists');
  }

  if (!this.state[STATE_NAME]) {
    this.setState(_defineProperty({}, STATE_NAME, {}));
  }

  this.setState(_defineProperty({}, STATE_NAME, assign({}, this.state[STATE_NAME], _defineProperty({}, key, val))));
}

function gets(key) {
  var state = getsAll.call(this);
  return state[key];
}

/**
 * private
 */

function throwError(msg) {
  throw new TypeError(msg);
}