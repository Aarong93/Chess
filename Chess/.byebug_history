quit
quity
display @board
c
quit
n
display @board
n
@board
n
start_col - 1
start_col
n
display self
display this
quit
qui
self
c
quit
c
cc
c
pos
quit
c
   22:       !@board.in_check?(@color)
   21:       @board.is_empty?([@curr_pos[0], @curr_pos[1] + 2]) &&
   20:       @board.is_empty?([@curr_pos[0], @curr_pos[1] + 1]) &&
@can_castle && @board[[@curr_pos[0], @curr_pos[1] + 3]].can_castle &&
@can_castle
q
legal_move?(start, end_pos)
start_col
end_col
n
display self
@board
n
@board
moves
n
!@board.in_check?(@color)
@board.is_empty?([@curr_pos[0], @curr_pos[1] + 2])
@board.is_empty?([@curr_pos[0], @curr_pos[1] + 1])
@board[[@curr_pos[0], @curr_pos[1] + 3]].can_castle
@curr_pos[1] + 3]].can_castle
@can_castle
c
quit
@has_castled
@board[[@curr_pos[0], @curr_pos[1] + 3]].can_castle
@can_castle
quit
@can_castle
c
quit
c
n
display @grid
n
self
quit
y
quit
@board
c
q
c
quit
@board[[7,7]]
@board
start
quit
qiot
@board[start].can_castle
@board[start].class
c
display @board[start].class
c
display @board[start].class
@board[start].class
@board[start]
q
@can_castle
q
@can_castle
quit
c
self.can_castle
c
self.can_castle
@can_castle
q
quit
!@board.in_check?(@color)
!@board.in_check(@color)
@board.is_empty?([@curr_pos[0], @curr_pos[1] + 2])
@board.is_empty?([@curr_pos[0], @curr_pos[1] + 1])
@can_castle
quit
start_piece.moves(self, true)
c
quit
start_piece.moves(self, true)
quit
c
quit
start_piece.moves(self, true)
start_piece.moves(self, True)
start_piece.moves(self, false)
start_piece.moves(self, true)
quit
start_piece.moves(self, true)
start_piece.moves(self)
start_piece.moves(this)
start_piece.moves(@board)
start_piece
start_piece.moves(self, true)
quit
start_piece.moves(self, true)
start_piece.class
start_piece.moves(self, true)
quit
start_piece
start_piece.moves(self, true)
quit
start_piece.moves(self, true)
quit
start_piece.moves(self)
start_piece.moves
n
quit
c
cc
c
cc
c
cc
c
quit
c
@board[[@curr_pos[0], @curr_pos[1] + 3]].can_castle
@can_castle
c
quit
c
cc
c
ddc
quit
piece
c
start_piece.class
c
n
end_row
start_piece.class == Pawn
start_piece
c
start_piece.class
start_piece
start_piece]
quit
best_move
c
alpha
best_eval
best_move
best_eval
c
quit
start_col
start_row
c
display start_piece
c
start_piece
quit
cur_eval
quit
c
display move
display cur_eval
q
c
cc
c
display color
display piece
quit
c
display color
c
display piece
quit
c
display piece
c
display val
display color
display pieces
c
pieces
quit
c
pieces
c
pieces
c
display  color
quit
display cur_eval
quit
c
display cur_eval
display move
quit
c
cc
c
display val
display piece
quit
y
quit
!(pieces[1].class == Queen)
!a
a = pieces[1].class == Queen
pieces[1].class == Queen
!pieces[1].class == Queen
pieces[1].class == Queen
pieces[1]
piece
pieces
quit
c
cc
c
cc
c
display val
display piece
display color
quit
piece.class == Pawn
piece.class
piece.class < Pawn
c
display piece.class
display color
displayc
display piece
quit
Piece.class
c
